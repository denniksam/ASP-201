@{
    ViewData["Title"] = "Scheme";
}
<div class="text-center">
    <h1 class="display-4">Схема взаємодії</h1>
</div>
<p>
    У взаємодії беруть участь декілька "гравців":<br/>
    клієнт - браузер або інший споживач інформації<br />
    сервер - бекенд, який оброблює запит клієнта та повертає дані (HTML / JSON / File /...)<br />
</p>
<p>
    Проходження запиту:
</p>
<ul>
    <li>
        У браузері натискається посилання або вводиться URL в адресний рядок. Це
        призводить до того, що браузер формує звернення (запит) до зазначеного URL.
    </li>
    <li>
        Браузер визначає IP (локацію) сервера з заданим URL (localhost) і передає
        до нього сформований НТТР-запит
    </li>
    <li>
        Бекенд складається з двох шарів: веб-сервер та веб-застосунок (Application).
        Веб-сервер це програма, яка слухає порт, приймає НТТР-запити, розділяє їх
        параметри, формує об'єкти .NET та передає їх до застосунку. За замовченням
        для ASP встановлюється IIS від Microsoft.
        Застосунок - це скомпільований код (DLL), зроблений з проєкту. Процес побудови
        DLL та передачі їх до IIS називається Deploy. Це пояснює чому зміни у коді
        не відразу відображаються у поведінці сайту - їх спочату треба перезібрати у
        DLL та, можливо, перенести у папки серверу (IIS) - Redeploy
    </li>
    <li>
        Пройшовши веб-сервер запит потрапляє у застосунок і проходить оброблення.
        Для кожного запиту сервер створює новий об'єкт (екземпляр) контроллера.
        Це робиться з міркувань безпеки - якщо перший екземпляр було створено для
        авторизованого користувача, то наступний запит від неавторизованого може
        звернутись до речей, які не мають бути доступними для нього.
        У той же час, інші об'єкти не перестворюються і існують протягом всієї роботи
        застосунку. Це складає основу Scopes - часових рамок існування об'єктів:
        Singleton - постійне існування, RequestScope - протягом одного запиту,
        Transient - протягом одного звернення до програмного об'єкту.
    </li>
    <li>
        Після оброблення у контроллерах робота передається на представлення (View).
        Формат .cshtml дозволяє впроваджувати коди C# у HTML з використанням
        спеціалізованого синтаксису - Razor. Для передачі даних з контролеру до
        представлення існує спеціальні об'єкти ViewBag (старий) та ViewData.
        ViewBag - dynamic, що може змінювати склад полів під час виконання,
        ViewData - Dictionary, що створює нові дані через індексатор []<br />

        Дані від ViewBag: <b>@ViewBag.bagdata </b><br />
        Дані від ViewData: <b>@ViewData["data"] </b><br />

    </li>
    <li>
        Після того як представлення відпрацювало, утворений HTML передається
        до IIS, він "упаковує" HTML у HTTP-відповідь (response) і передає
        її до клієнта (браузера)
    </li>
</ul>
<p>
    Д.З. Створити сторінку /Home/Url у якій надати відомості про структуру URL
    Розкрити що таке:
    - протокол
    - домен (origin)
    - порт
    - PATH (шлях)
    - хеш
    - URL-параметри
    Прикласти скріншот сторінки
</p>